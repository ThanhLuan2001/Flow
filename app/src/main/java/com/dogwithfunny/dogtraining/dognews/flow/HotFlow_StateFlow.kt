package com.dogwithfunny.dogtraining.dognews.flow

import kotlinx.coroutines.*
import kotlinx.coroutines.flow.*

/*üü¢ StateFlow (D·ªØ li·ªáu tr·∫°ng th√°i - Gi·ªØ gi√° tr·ªã m·ªõi nh·∫•t)

ƒê·∫∑c ƒëi·ªÉm
‚úÖ Lu√¥n l∆∞u tr·ªØ gi√° tr·ªã m·ªõi nh·∫•t.
‚úÖ Khi c√≥ collector m·ªõi tham gia, n√≥ nh·∫≠n gi√° tr·ªã hi·ªán t·∫°i ngay l·∫≠p t·ª©c.
‚úÖ Th∆∞·ªùng d√πng ƒë·ªÉ l∆∞u tr·∫°ng th√°i UI (ViewModel trong MVVM).

V√≠ d·ª• d·ªÖ hi·ªÉu
B·∫°n c√≥ m·ªôt b·∫£ng th√¥ng tin s·ªë d∆∞ t√†i kho·∫£n:

N·∫øu c√≥ ai v√†o xem, h·ªç lu√¥n th·∫•y s·ªë d∆∞ m·ªõi nh·∫•t.
N·∫øu s·ªë d∆∞ thay ƒë·ªïi, m·ªçi ng∆∞·ªùi ƒëang theo d√µi ƒë·ªÅu th·∫•y ngay l·∫≠p t·ª©c.*/

fun main() = runBlocking {
    val stateFlow = MutableStateFlow(0) // Gi√° tr·ªã m·∫∑c ƒë·ªãnh l√† 0

    launch {
        for (i in 1..5) {
            delay(1000)
            stateFlow.value = i // C·∫≠p nh·∫≠t gi√° tr·ªã m·ªõi
            println("üî• Gi√° tr·ªã m·ªõi ƒë∆∞·ª£c c·∫≠p nh·∫≠t: $i")
        }
    }

    delay(2500) // Gi·∫£ s·ª≠ Collector 1 tham gia sau 2.5s
    println("Collector 1 tham gia")
    val job1 = launch { stateFlow.collect { println("Collector 1 nh·∫≠n: $it") } }

    delay(2000) // Gi·∫£ s·ª≠ Collector 2 tham gia sau 2s n·ªØa
    println("Collector 2 tham gia")
    val job2 = launch { stateFlow.collect { println("Collector 2 nh·∫≠n: $it") } }

    delay(3000)
    job1.cancel()
    job2.cancel()
}

/*
‚úÖ Khi n√†o d√πng StateFlow?

L∆∞u tr·∫°ng th√°i UI trong ViewModel (v√≠ d·ª•: tr·∫°ng th√°i m·∫°ng, s·ªë ƒëi·ªÉm tr√≤ ch∆°i, t√™n ng∆∞·ªùi d√πng).
Khi b·∫°n ch·ªâ quan t√¢m ƒë·∫øn gi√° tr·ªã m·ªõi nh·∫•t, kh√¥ng c·∫ßn gi·ªØ l·ªãch s·ª≠.*/
