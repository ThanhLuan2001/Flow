package com.dogwithfunny.dogtraining.dognews.flow

import kotlinx.coroutines.*
import kotlinx.coroutines.flow.*

/*üî¥ SharedFlow (Lu·ªìng chia s·∫ª - Gi·ªØ nhi·ªÅu gi√° tr·ªã)
ƒê·∫∑c ƒëi·ªÉm
‚úÖ C√≥ th·ªÉ ph√°t nhi·ªÅu gi√° tr·ªã li√™n t·ª•c.
‚úÖ C√≥ th·ªÉ gi·ªØ l·ªãch s·ª≠ (replay).
‚úÖ Kh√¥ng c√≥ gi√° tr·ªã m·∫∑c ƒë·ªãnh (kh√°c v·ªõi StateFlow).

V√≠ d·ª• d·ªÖ hi·ªÉu
B·∫°n c√≥ m·ªôt nh√≥m chat:

Khi c√≥ tin nh·∫Øn m·ªõi, t·∫•t c·∫£ th√†nh vi√™n ƒëang online ƒë·ªÅu nh·∫≠n ƒë∆∞·ª£c.
Ng∆∞·ªùi m·ªõi tham gia kh√¥ng th·∫•y tin nh·∫Øn c≈© (tr·ª´ khi b·∫°n c√†i ƒë·∫∑t replay).*/

fun main() = runBlocking {
    val sharedFlow = MutableSharedFlow<Int>(replay = 2) // Gi·ªØ 2 gi√° tr·ªã g·∫ßn nh·∫•t

    launch {
        for (i in 1..5) {
            delay(1000)
            sharedFlow.emit(i) // Ph√°t gi√° tr·ªã m·ªõi
            println("üî• Gi√° tr·ªã m·ªõi ƒë∆∞·ª£c ph√°t: $i")
        }
    }

    delay(3500) // Gi·∫£ s·ª≠ Collector 1 tham gia sau 3.5s
    println("Collector 1 tham gia")
    val job1 = launch { sharedFlow.collect { println("Collector 1 nh·∫≠n: $it") } }

    delay(2000) // Gi·∫£ s·ª≠ Collector 2 tham gia sau 2s n·ªØa
    println("Collector 2 tham gia")
    val job2 = launch { sharedFlow.collect { println("Collector 2 nh·∫≠n: $it") } }

    delay(3000)
    job1.cancel()
    job2.cancel()
}

/*‚úÖ Khi n√†o d√πng SharedFlow?

Khi b·∫°n mu·ªën ph√°t s·ª± ki·ªán cho nhi·ªÅu ng∆∞·ªùi c√πng l√∫c (v√≠ d·ª•: th√¥ng b√°o h·ªá th·ªëng, tin nh·∫Øn chat).
Khi b·∫°n mu·ªën l∆∞u tr·ªØ m·ªôt s·ªë gi√° tr·ªã g·∫ßn ƒë√¢y (d√πng replay).*/

